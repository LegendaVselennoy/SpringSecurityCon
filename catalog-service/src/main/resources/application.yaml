spring:
#  sql:
#    init:
#      mode: always
  application:
    name: catalog-service
  config:
    import: "optional:configserver:" # Imports configuration data from a config server when available
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000  # Timeout on waiting to connect to the config server
      request-read-timeout: 5000     # Timeout on waiting to read configuration data from the config server
      fail-fast: true
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1              # Multiplier to compute the next interval

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop

  datasource:
    username: postgres
    password: ${DB_PASSWORD:postgres}
    url: jdbc:postgresql://localhost:5432/test
    hikari:
      connection-timeout: 2000
      maximum-pool-size: 5

  profiles:
    active: test

server:
  port: 9001
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5


polar:
  greeting: Welcome to the local book catalog!

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus, heapdump
  metrics:
    tags:
      application: ${spring.application.name}



logging:
  pattern:
    level: "%5p [${spring.application.name}, %X{trace_id},%X{span_id}]"